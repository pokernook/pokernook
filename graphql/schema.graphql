### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

"""One emoji character"""
scalar EmojiSingular

input EnumFriendRequestStatusFilter {
  equals: FriendRequestStatus
  in: [FriendRequestStatus!]
  not: NestedEnumFriendRequestStatusFilter
  notIn: [FriendRequestStatus!]
}

type FriendRequest {
  createdAt: DateTime!
  from: User!
  id: String!
  status: FriendRequestStatus!
  to: User!
  updatedAt: DateTime!
}

enum FriendRequestStatus {
  ACCEPTED
  CANCELLED
  PENDING
  REJECTED
}

type Friendship {
  createdAt: DateTime!
  id: String!
  users(cursor: UserWhereUniqueInput, skip: Int, take: Int): [User!]!
}

input FriendshipWhereUniqueInput {
  id: String
}

type Mutation {
  friendRequestAccept(friendRequestId: String!): FriendRequest
  friendRequestCancel(friendRequestId: String!): FriendRequest
  friendRequestReject(friendRequestId: String!): FriendRequest
  friendRequestSend(discriminator: Int!, username: String!): FriendRequest
  friendshipDelete(friendshipId: String!): Friendship
  userDeleteAccount: User
  userLogIn(email: EmailAddress!, password: String!): UserAuthPayload
  userLogOut: UserLogOutPayload
  userSignUp(email: EmailAddress!, password: String!, username: String!): UserAuthPayload
  userStatusClear: UserStatus
  userStatusSet(emoji: EmojiSingular, message: String): UserStatus
  userUpdateEmail(newEmail: EmailAddress!, password: String!): User
  userUpdatePassword(currentPassword: String!, newPassword: String!): User
  userUpdateUsername(newUsername: String!): User
}

input NestedEnumFriendRequestStatusFilter {
  equals: FriendRequestStatus
  in: [FriendRequestStatus!]
  not: NestedEnumFriendRequestStatusFilter
  notIn: [FriendRequestStatus!]
}

type Query {
  me: User
}

type User {
  createdAt: DateTime!
  discriminator: Int!
  email: String!
  emailVerified: DateTime
  friendRequestsReceived(where: UserFriendRequestsReceivedWhereInput): [FriendRequest!]!
  friendRequestsSent(where: UserFriendRequestsSentWhereInput): [FriendRequest!]!
  friendships(cursor: FriendshipWhereUniqueInput, skip: Int, take: Int): [Friendship!]!
  id: String!
  status: UserStatus
  username: String!
}

type UserAuthPayload {
  user: User
}

input UserFriendRequestsReceivedWhereInput {
  status: EnumFriendRequestStatusFilter
}

input UserFriendRequestsSentWhereInput {
  status: EnumFriendRequestStatusFilter
}

type UserLogOutPayload {
  sessionId: String
  user: User
}

type UserStatus {
  createdAt: DateTime!
  emoji: String
  id: String!
  message: String
  updatedAt: DateTime!
  user: User!
}

input UserTagCompoundUniqueInput {
  discriminator: Int!
  username: String!
}

input UserWhereUniqueInput {
  Tag: UserTagCompoundUniqueInput
  email: String
  id: String
}
